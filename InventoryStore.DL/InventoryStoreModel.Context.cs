//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryStore.DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryStoreEntityConnection : DbContext
    {
        public InventoryStoreEntityConnection()
            : base("name=InventoryStoreEntityConnection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Brands> tbl_Brands { get; set; }
        public virtual DbSet<tbl_Categories> tbl_Categories { get; set; }
        public virtual DbSet<tbl_Groups> tbl_Groups { get; set; }
        public virtual DbSet<tbl_Orders> tbl_Orders { get; set; }
        public virtual DbSet<tbl_Products> tbl_Products { get; set; }
        public virtual DbSet<tbl_Stores> tbl_Stores { get; set; }
        public virtual DbSet<tbl_Supplier> tbl_Supplier { get; set; }
        public virtual DbSet<tbl_Users> tbl_Users { get; set; }
    
        public virtual int delete_Store(Nullable<int> store_Id)
        {
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("store_Id", store_Id) :
                new ObjectParameter("store_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_Store", store_IdParameter);
        }
    
        public virtual ObjectResult<parlevelproducts_Result> parlevelproducts(Nullable<int> qty)
        {
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<parlevelproducts_Result>("parlevelproducts", qtyParameter);
        }
    
        public virtual ObjectResult<Search_Store_Result> Search_Store(Nullable<int> store_Id)
        {
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("store_Id", store_Id) :
                new ObjectParameter("store_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Search_Store_Result>("Search_Store", store_IdParameter);
        }
    
        public virtual ObjectResult<sp_GetSales_Result> sp_GetSales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSales_Result>("sp_GetSales");
        }
    
        public virtual ObjectResult<sp_Notifications_Result> sp_Notifications(Nullable<int> parlevel)
        {
            var parlevelParameter = parlevel.HasValue ?
                new ObjectParameter("parlevel", parlevel) :
                new ObjectParameter("parlevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Notifications_Result>("sp_Notifications", parlevelParameter);
        }
    
        public virtual ObjectResult<sp_NotificationsByLevel_Result> sp_NotificationsByLevel(Nullable<int> parlevel)
        {
            var parlevelParameter = parlevel.HasValue ?
                new ObjectParameter("parlevel", parlevel) :
                new ObjectParameter("parlevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationsByLevel_Result>("sp_NotificationsByLevel", parlevelParameter);
        }
    
        public virtual ObjectResult<SP_SaveBrand_Result> SP_SaveBrand(Nullable<int> id, string name, Nullable<bool> status, Nullable<int> category_id, string company_Name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var category_idParameter = category_id.HasValue ?
                new ObjectParameter("Category_id", category_id) :
                new ObjectParameter("Category_id", typeof(int));
    
            var company_NameParameter = company_Name != null ?
                new ObjectParameter("Company_Name", company_Name) :
                new ObjectParameter("Company_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveBrand_Result>("SP_SaveBrand", idParameter, nameParameter, statusParameter, category_idParameter, company_NameParameter);
        }
    
        public virtual ObjectResult<SP_SaveCategory_Result> SP_SaveCategory(Nullable<int> id, string name, Nullable<bool> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveCategory_Result>("SP_SaveCategory", idParameter, nameParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_SaveGroup_Result> SP_SaveGroup(Nullable<int> id, string name, string menus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var menusParameter = menus != null ?
                new ObjectParameter("Menus", menus) :
                new ObjectParameter("Menus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveGroup_Result>("SP_SaveGroup", idParameter, nameParameter, menusParameter);
        }
    
        public virtual ObjectResult<SP_SaveOrder_Result> SP_SaveOrder(Nullable<int> id, Nullable<int> productId, Nullable<int> itemsCount, Nullable<decimal> cost, Nullable<decimal> amount, string billNo, string customerName, string customer_Address, string phone, Nullable<System.DateTime> createdDate, Nullable<decimal> grossAmount, Nullable<decimal> serivceCharge, Nullable<decimal> vatCharge, Nullable<decimal> discount, Nullable<decimal> netAmount, Nullable<int> paidStatus, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var itemsCountParameter = itemsCount.HasValue ?
                new ObjectParameter("ItemsCount", itemsCount) :
                new ObjectParameter("ItemsCount", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customer_AddressParameter = customer_Address != null ?
                new ObjectParameter("Customer_Address", customer_Address) :
                new ObjectParameter("Customer_Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var serivceChargeParameter = serivceCharge.HasValue ?
                new ObjectParameter("SerivceCharge", serivceCharge) :
                new ObjectParameter("SerivceCharge", typeof(decimal));
    
            var vatChargeParameter = vatCharge.HasValue ?
                new ObjectParameter("VatCharge", vatCharge) :
                new ObjectParameter("VatCharge", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var paidStatusParameter = paidStatus.HasValue ?
                new ObjectParameter("PaidStatus", paidStatus) :
                new ObjectParameter("PaidStatus", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveOrder_Result>("SP_SaveOrder", idParameter, productIdParameter, itemsCountParameter, costParameter, amountParameter, billNoParameter, customerNameParameter, customer_AddressParameter, phoneParameter, createdDateParameter, grossAmountParameter, serivceChargeParameter, vatChargeParameter, discountParameter, netAmountParameter, paidStatusParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_SaveProduct_Result> SP_SaveProduct(Nullable<int> id, string productName, string sKU, Nullable<int> supplierId, Nullable<int> categoryId, Nullable<int> brandId, Nullable<int> storeId, string description, Nullable<int> quantity, Nullable<decimal> price, Nullable<System.DateTime> expiryDate, Nullable<bool> availability)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveProduct_Result>("SP_SaveProduct", idParameter, productNameParameter, sKUParameter, supplierIdParameter, categoryIdParameter, brandIdParameter, storeIdParameter, descriptionParameter, quantityParameter, priceParameter, expiryDateParameter, availabilityParameter);
        }
    
        public virtual ObjectResult<SP_SaveStore_Result> SP_SaveStore(Nullable<int> id, string name, Nullable<bool> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveStore_Result>("SP_SaveStore", idParameter, nameParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_SaveSupplier_Result> SP_SaveSupplier(Nullable<int> id, string name, string serviceCharge, string vat, string address, string phone, string country, string message, string currency)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var serviceChargeParameter = serviceCharge != null ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(string));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveSupplier_Result>("SP_SaveSupplier", idParameter, nameParameter, serviceChargeParameter, vatParameter, addressParameter, phoneParameter, countryParameter, messageParameter, currencyParameter);
        }
    
        public virtual ObjectResult<SP_SaveUser_Result> SP_SaveUser(Nullable<int> id, string firstName, string lastName, string gender, string phone, string password, string emailId, Nullable<int> groupId, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveUser_Result>("SP_SaveUser", idParameter, firstNameParameter, lastNameParameter, genderParameter, phoneParameter, passwordParameter, emailIdParameter, groupIdParameter, isActiveParameter);
        }
    
        public virtual int Update_Store(string store_Name, Nullable<int> store_status, Nullable<int> store_Id)
        {
            var store_NameParameter = store_Name != null ?
                new ObjectParameter("Store_Name", store_Name) :
                new ObjectParameter("Store_Name", typeof(string));
    
            var store_statusParameter = store_status.HasValue ?
                new ObjectParameter("store_status", store_status) :
                new ObjectParameter("store_status", typeof(int));
    
            var store_IdParameter = store_Id.HasValue ?
                new ObjectParameter("store_Id", store_Id) :
                new ObjectParameter("store_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Store", store_NameParameter, store_statusParameter, store_IdParameter);
        }
    
        public virtual ObjectResult<ViewAll_Stores_Result> ViewAll_Stores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewAll_Stores_Result>("ViewAll_Stores");
        }
    }
}
